---
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import Layout from '../layouts/Layout.astro';

import BaseHead from "../components/BaseHead.astro";

/* Check if the user is authenticated */

const auth = getAuth(app);
if (Astro.cookies.has("session")) {
    const session = Astro.cookies.get("session");
    if (!session) {
        return Astro.redirect("/signin");
        }
    const sessionCookie = session.value;
    const decodedCookie = await auth.verifySessionCookie(sessionCookie, true);
    if (decodedCookie) {
        return Astro.redirect("/dashboard/main");
    }
}

---
<Layout title="Sign in - LearnBetter" description="Sign in to access guided learning and personalized features.">
    <h1>Sign in</h1>

    <!-- <p>New here? <a href="/register">Create an account</a></p> -->
    <form action="/api/auth/signin" method="post" >
        <label for="email" for="email">Email</label>
        <input type="email" name="email" id="email" />
        <label for="password">Password</label>
        <input type="password" name="password" id="password"/>
        <button type="submit">Login</button>
        <div class="loading" id= "loading" style="display: none">Loading...</div>
        <p id="error-message" style="display: none;"></p>

    </form>
    <!-- <div class="social-login">
        <p>Or</p>
        <div class="social">
            <button id="google">
                <svg width="800px" height="800px" viewBox="-0.5 0 48 48" version="1.1" xmlns="http://www.w3.org/2000/svg">
                    <title>Google-color</title><desc>Created with Sketch.</desc><defs></defs>
                        <g id="Icons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g id="Color-" transform="translate(-401.000000, -860.000000)">
                                <g id="Google" transform="translate(401.000000, 860.000000)">
                                    <path d="M9.82727273,24 C9.82727273,22.4757333 10.0804318,21.0144 10.5322727,19.6437333 L2.62345455,13.6042667 C1.08206818,16.7338667 0.213636364,20.2602667 0.213636364,24 C0.213636364,27.7365333 1.081,31.2608 2.62025,34.3882667 L10.5247955,28.3370667 C10.0772273,26.9728 9.82727273,25.5168 9.82727273,24" id="Fill-1" fill="#FBBC05"></path>
                                    <path d="M23.7136364,10.1333333 C27.025,10.1333333 30.0159091,11.3066667 32.3659091,13.2266667 L39.2022727,6.4 C35.0363636,2.77333333 29.6954545,0.533333333 23.7136364,0.533333333 C14.4268636,0.533333333 6.44540909,5.84426667 2.62345455,13.6042667 L10.5322727,19.6437333 C12.3545909,14.112 17.5491591,10.1333333 23.7136364,10.1333333" id="Fill-2" fill="#EB4335"></path>
                                    <path d="M23.7136364,37.8666667 C17.5491591,37.8666667 12.3545909,33.888 10.5322727,28.3562667 L2.62345455,34.3946667 C6.44540909,42.1557333 14.4268636,47.4666667 23.7136364,47.4666667 C29.4455,47.4666667 34.9177955,45.4314667 39.0249545,41.6181333 L31.5177727,35.8144 C29.3995682,37.1488 26.7323182,37.8666667 23.7136364,37.8666667" id="Fill-3" fill="#34A853"></path>
                                    <path d="M46.1454545,24 C46.1454545,22.6133333 45.9318182,21.12 45.6113636,19.7333333 L23.7136364,19.7333333 L23.7136364,28.8 L36.3181818,28.8 C35.6879545,31.8912 33.9724545,34.2677333 31.5177727,35.8144 L39.0249545,41.6181333 C43.3393409,37.6138667 46.1454545,31.6490667 46.1454545,24" id="Fill-4" fill="#4285F4"></path>
                                </g>
                            </g>
                        </g>
                    </svg>
            </button>
            <button id="facebook">
                <svg width="800px" height="800px" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="16" cy="16" r="14" fill="url(#paint0_linear_87_7208)"/>
                    <path d="M21.2137 20.2816L21.8356 16.3301H17.9452V13.767C17.9452 12.6857 18.4877 11.6311 20.2302 11.6311H22V8.26699C22 8.26699 20.3945 8 18.8603 8C15.6548 8 13.5617 9.89294 13.5617 13.3184V16.3301H10V20.2816H13.5617V29.8345C14.2767 29.944 15.0082 30 15.7534 30C16.4986 30 17.2302 29.944 17.9452 29.8345V20.2816H21.2137Z" fill="white"/>
                    <defs>
                    <linearGradient id="paint0_linear_87_7208" x1="16" y1="2" x2="16" y2="29.917" gradientUnits="userSpaceOnUse">
                        <stop stop-color="#18ACFE"/>
                        <stop offset="1" stop-color="#0163E0"/>
                    </linearGradient>
                    </defs>
                </svg>
            </button>
        </div>
    </div> -->
    
</Layout>
<script>
    
import { getAuth, inMemoryPersistence, signInWithEmailAndPassword } from "firebase/auth";
import getFriendlyErrorMessage from "../firebase/auth/getFriendlyErrorMessage";
import { app } from "../firebase/client";

    const auth = getAuth(app);
    // This will prevent the browser from storing session data
    auth.setPersistence(inMemoryPersistence);
    let error:any;

    const form = document.querySelector("form") as HTMLFormElement;
    const loading = document.getElementById('loading') as HTMLDivElement;
    const button = document.querySelector("button") as HTMLButtonElement;
    const errorMessage = document.getElementById('error-message') as HTMLParagraphElement;
    form.addEventListener("submit", async (e) => {
       
        e.preventDefault();
        loading.style.display = 'block';
        button.style.display = 'none';

        const formData = new FormData(form);
        const email = formData.get("email")?.toString();
        const password = formData.get("password")?.toString();

        if (!email || !password) {
            error = "Missing email or password";
            errorMessage.textContent = error;
            errorMessage.style.display = 'block';
            loading.style.display = 'none';
            button.style.display = 'block';
            
        return;
        }
        
       
        try {
            const userCredential = await signInWithEmailAndPassword(auth, email, password);
            const idToken = await userCredential.user.getIdToken();
            sessionStorage.setItem("idToken", idToken);//store the token in the session storage for persistence when redirecting
            const response = await fetch("/api/auth/signin", {
            method: "GET",
            headers: {
                Authorization: `Bearer ${idToken}`,
            },
            });
    
            if (response.redirected) {
                window.location.assign(response.url);
                }
            
        } catch (error: any) {
            const message = getFriendlyErrorMessage(error.code);
            console.log(error);
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
        } finally {
            loading.style.display = 'none';
            button.style.display = 'block';
        }
        
    });
    
    //Sign-in with google
//     const googleSignin = document.querySelector("#google") as HTMLButtonElement;
//     googleSignin.addEventListener("click", async () => {
//     const provider = new GoogleAuthProvider();
//     const userCredential = await signInWithPopup(auth, provider);
//     const idToken = await userCredential.user.getIdToken();
//     const res = await fetch("/api/auth/signin", {
//       headers: {
//         Authorization: `Bearer ${idToken}`,
//       },
//     });

//     if (res.redirected) {
//       window.location.assign(res.url);
//     }
//   });
//   const facebookSignin = document.querySelector("#facebook") as HTMLButtonElement;
//   googleSignin.addEventListener("click", async () => {
//     const provider = new FacebookAuthProvider();
//     const userCredential = await signInWithPopup(auth, provider);
//     const idToken = await userCredential.user.getIdToken();
//     const res = await fetch("/api/auth/signin", {
//       headers: {
//         Authorization: `Bearer ${idToken}`,
//       },
//     });

//     if (res.redirected) {
//       window.location.assign(res.url);
//     }
//   });
</script>
<style lang="scss">
    form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    input {
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 0.25rem;
    }
    button {
        padding: 0.5rem;
        border: none;
        border-radius: 0.25rem;
        background-color: #288cde;
        transition: all 0.2s ease-in-out;
        color: #fff;
        &:hover {
                    cursor: pointer;
                    transform: scale(1.1);
                }
        &:focus {
                outline: none;
                border: 1px solid #288cde;
            }
    }
    .social-login {
        display: flex;
        flex-direction: column;
        align-items: center;
      
        .social {
            display: flex;
            justify-content: space-around;
            svg {
                width:100%;
                height:100%;
                fill: none;
                border-radius: 50%;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
                
            }
            button {
                width: 5rem;
                height: 5rem;
                margin: 1rem;
                border-radius: 50%;
                background-color: transparent;
                
            }
        }
    }

</style>